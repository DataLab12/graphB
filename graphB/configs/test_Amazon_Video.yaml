#######################################################################################################
# GENERAL SETTINGS:
#######################################################################################################
parallelism: serial #  choose between: spark, serial
machine: current #  choose between: current, LEAP

dataset: test #  Corresponds to the name of the repository i.e. data-[dataset]
data_subset_type: Amazon #  Corresponds to the first label in edges and users naming. i.e. [data_subset_type]_[matrix_name]_edges.csv
matrix_name: Video #  Corresponds to the second label in edges and users naming. i.e. [data_subset_type]_[matrix_name]_edges.csv
component_no: 0 #  This option should always be left as 0 for this version. Trees will always be run on the largest connected component, a.k.a. component 0

#######################################################################################################
# PREPROCESSING SETTINGS (Raw Data --> Input Data):
#######################################################################################################
preprocess: Yes #  If the Input Data (i.e. full matrix h5) desired already exists, remake it.
has_labels: No #  Does this dataset have labels or colors for each vertex?

min_component_size: 10 #  The minimum number of vertices we will consider making a full h5 matrix for.

#######################################################################################################
# PROCESSING / TREE CREATION SETTINGS (Input Data --> Data):
#######################################################################################################
tree_type: #  tree sampling options
  random: No
  breadth: Yes
  depth: No
num_trees: 100 #  The number of trees you want to make

#######################################################################################################
# POSTPROCESSING / ANALYSIS SETTINGS (Data --> Output Data):
#######################################################################################################
postprocess: Yes #  If yes, generate dataframes or plots selected below. If no, do nothing.

dataframes:
  vertex_df: Yes # Need to make this to generate status
plots:
  tree_bias_vs_c0: No # This option works if the dataset has outcomes.
  vertex_status_vs_id: Yes # This option is what outputs the status vs. id csvs and pngs
# postprocessing options
tiebreak_node: None #  OPTIONS: <integer corresponding to node> or <None>
weighted_status: No #  If weighted status values based on the size of the majority/minority i.e. if majority was 70%, nodes will get assigned a status value of .7 for each time they are in the majority. This option makes average status converge to .5. Was put in as proof of concept.
