parallelism: 'serial' # choose between: spark, parallel, serial
machine: "current" # choose between: current, LEAP

# preprocessing settings (Raw Data --> Input Data)

preprocess_again: Yes # If the Input Data (i.e. full matrix h5) desired already exists, remake it.
make_symm: Yes # If it doesn't already exist or reprocess == Yes, then make the symmetricized h5
make_unsymm: No # If it doesn't already exist or reprocess == Yes, then make the unsymmetricized h5
has_labels: No # Does this dataset have labels or colors for each vertex?

min_component_size: 3 # The minimum number of vertices we will consider making a full h5 matrix for.

# processing / tree creation settings (Input Data --> Data)
tree_type: # tree sampling options 
  random_MST: No 
  breadth: Yes
  depth: No
num_random_trees: 10 # The number of trees you want to make
dataset: "test" # The dataset you want to make trees out of (i.e. wiki? slashdot? epinions? etc)
data_subset_type: "highland" # The matrix subset of the data you want to make trees out of (i.e. for wiki: elections? candidate?). If not a subset, put "regular"
matrix_name: "tribes" # The particular matrix subset you want to make trees out of (i.e. for wiki elections, election 3? 6?). Again, if you just want to use the whole dataset, put "regular"
component_no: 0 # The particular component of the graph you want to make trees with. Components ordered by number of vertices descending (i.e. 0 is the biggest component). If the matrix is one connected component, then put 0.

# postprocessing / analysis settings (Data --> Output Data)

postprocess_again: Yes # Whatever you're making, if it already exists, recreate it.
all: No # For all options below, make them if they're not already there. Put no if you just want to make specific items (dfs, plots, tables)

all_dfs: No # Make all "dataframes" options
all_plots: No # Make all "plots" options
all_tables: No # Make all "tables" options

tiebreak_node: None # OPTIONS: <integer corresponding to node> or <None> 
    # The node in the graph that will determine which group is the majority, if the size of majority and minority are the same.

weighted_status: No # If weighted status values based on the size of the majority/minority

dataframes:
  vertex_df: Yes
  tree_df: No
  edge_sign_df: No
  tree_edge_df: No
  treewise_edge_prediction_df: No
  edgewise_edge_prediction_df: No
  
plots: # more to add later
  tree_bias_vs_c0: No
  vertex_status_vs_id: Yes
  histograms: No
tables:
  vertex_table: No
  tree_table: No
  tree_corr_table: No
stats:
  BEC_histogram: No
